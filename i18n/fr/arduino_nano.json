{
  "arduino_nano": "Arduino Nano",
  "extensionName": "Arduino Nano",
  "extensionDescription": "",
  "firmwares_version_0": "Firmware en ligne",
  "UPDATE_FIRMWARE": "Mise à jour Microprogramme",
  "connect_fail_6d44027d": "Veuillez vous assurer que le câble USB est correctement connecté à l'appareil.",
  "connect_fail_a605d9a4": "Veuillez vous assurer que l'appareil connecté est allumé.",
  "connect_fail_7f65f6e1": "Un seul appareil peut être connecté à la fois dans cette version. La connexion de cet appareil entraînera la déconnexion du précédent.",
  "upload_fail_6d692a95": "Veuillez consulter les blocs de codage ou le code de cet appareil. Assurez-vous que toutes les données, les paramètres et la logique de programmation sont corrects.",
  "upload_fail_f97d60f4": "Veuillez vous assurer que votre appareil est correctement connecté. Vous pouvez redémarrer l'appareil et le reconnecter.",
  "firmware_success_b74d4379": "Pour une meilleure expérience, vous pouvez redémarrer l'appareil et le connecter à nouveau.",
  "firmware_fail_c46a5a9b": "Veuillez vous assurer que l'appareil est correctement branché. Vous pouvez redémarrer l'appareil, le connecter à nouveau, puis mettre à jour le firmware à nouveau.",
  "getDigital": "[ICON] lire la broche numérique [PORT]",
  "getAnalog": "[ICON] lire la broche analogique（A）[PORT]",
  "getPulse": "[ICON]lire broche d'impulsion[PORT] Timeout[TIME]",
  "SETDIGITAL_LEVEL_0": "haut",
  "SETDIGITAL_LEVEL_1": "bas",
  "setDigital": "[ICON] mettre l'état logique de la broche [PORT] sur [LEVEL]",
  "setPwm": "[ICON] régler la sortie du port PWM [PORT] sur [POWER]",
  "SETTONE_NOTE_0": "C2",
  "SETTONE_NOTE_1": "D2",
  "SETTONE_NOTE_2": "E2",
  "SETTONE_NOTE_3": "F2",
  "SETTONE_NOTE_4": "G2",
  "SETTONE_NOTE_5": "A2",
  "SETTONE_NOTE_6": "B2",
  "SETTONE_NOTE_7": "C3",
  "SETTONE_NOTE_8": "D3",
  "SETTONE_NOTE_9": "E3",
  "SETTONE_NOTE_10": "F3",
  "SETTONE_NOTE_11": "G3",
  "SETTONE_NOTE_12": "A3",
  "SETTONE_NOTE_13": "B3",
  "SETTONE_NOTE_14": "C4",
  "SETTONE_NOTE_15": "D4",
  "SETTONE_NOTE_16": "E4",
  "SETTONE_NOTE_17": "F4",
  "SETTONE_NOTE_18": "G4",
  "SETTONE_NOTE_19": "A4",
  "SETTONE_NOTE_20": "B4",
  "SETTONE_NOTE_21": "C5",
  "SETTONE_NOTE_22": "D5",
  "SETTONE_NOTE_23": "E5",
  "SETTONE_NOTE_24": "F5",
  "SETTONE_NOTE_25": "G5",
  "SETTONE_NOTE_26": "A5",
  "SETTONE_NOTE_27": "B5",
  "SETTONE_NOTE_28": "C6",
  "SETTONE_NOTE_29": "D6",
  "SETTONE_NOTE_30": "E6",
  "SETTONE_NOTE_31": "F6",
  "SETTONE_NOTE_32": "G6",
  "SETTONE_NOTE_33": "A6",
  "SETTONE_NOTE_34": "B6",
  "SETTONE_NOTE_35": "C7",
  "SETTONE_NOTE_36": "D7",
  "SETTONE_NOTE_37": "E7",
  "SETTONE_NOTE_38": "F7",
  "SETTONE_NOTE_39": "G7",
  "SETTONE_NOTE_40": "A7",
  "SETTONE_NOTE_41": "B7",
  "SETTONE_NOTE_42": "C8",
  "setTone": "play pin[PORT] with note [NOTE] for [BEAT] beats",
  "setServo": "set servo pin [PORT] angle as[ANGLE]",
  "SUSPEND_PORT_0": "2",
  "SUSPEND_PORT_1": "3",
  "SUSPEND_MODE_0": "front ascendant",
  "SUSPEND_MODE_1": "front descendant",
  "SUSPEND_MODE_2": "modifier",
  "SUSPEND_MODE_3": "bas",
  "suspend": "[ICON] interrompre la broche [PORT] exécuter le mode [MODE]",
  "cancelSuspend": "[ICON] ne pas interrompre la broche [PORT]",
  "CATEGORY_PIN": "Broche",
  "serialWrite": "write[TEXT]to serial port",
  "getSerialAvailable": "[ICON] octets disponibles depuis le port série",
  "serialRead": "[ICON] lire un octet depuis le port série",
  "CATEGORY_SERIALPORT": "port série",
  "mapping": "[ICON] ré-étalonner [value] depuis（ [fromLow] , [fromHigh] ）vers [toLow] , [toHigh] ）",
  "constraint": "[ICON] borner [x] entre（ [a] , [b] ）",
  "TYPECONVERSION_TYPE_0": "nombre entier",
  "TYPECONVERSION_TYPE_1": "décimal",
  "TYPECONVERSION_TYPE_2": "chaîne",
  "typeConversion": "[ICON] [NUMBER] converti en [TYPE]",
  "ASCIICharConversion": "[ICON] [NUMBER] converti en caractère ASCII",
  "ASCIINumConversion": "[ICON] [STRING] converti en caractère ASCII",
  "cate_ead4430e": "Données",
  "getUltrasonic": "[ICON] lire les broches TRIG [PORT1] et ECHO [PORT2] du capteur ultrasonique",
  "getTimer": "[ICON] chronomètre",
  "resetTimer": "[ICON] réinitialiser le chronomètre",
  "CATEGORY_SENSOR": "Capteur",
  "arduino_when_board_launch": "lorsque Arduino démarre",
  "firmwares_description_0": "aucun",
  "settings_0": "Mise à jour Microprogramme"
}
