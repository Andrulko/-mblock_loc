{
  "arduino_nano": "Arduino Nano",
  "extensionName": "Arduino Nano",
  "extensionDescription": "",
  "firmwares_version_0": "Firmware en internet",
  "UPDATE_FIRMWARE": "Actualizar firmware",
  "connect_fail_6d44027d": "Asegúrate que el cable USB está conectado correctamente al dispositivo.",
  "connect_fail_a605d9a4": "Asegúrate que el dispositivo a conectar está encendido.",
  "connect_fail_7f65f6e1": "Solo puedes conectar un dispositivo a la vez, en esta versión. Si conectas este dispositivo, se desconectará el que ya está conectado.",
  "upload_fail_6d692a95": "Comprueba los bloques de código o las líneas de código para este dispositivo. Asegúrate que los datos, parámetros y lógica del programa son correctos.",
  "upload_fail_f97d60f4": "Comprueba si tu dispositivo está bien conectado. Puedes reiniciar el dispositivo y conectarlo de nuevo.",
  "firmware_success_b74d4379": "Para aprovechar la actualización, puedes reiniciar el dispositivo y conectarlo de nuevo.",
  "firmware_fail_c46a5a9b": "Comprueba que tu dispositivo esté bien conectado. Puedes reiniciar el dispositivo, volver a conectarlo e intentar actualizar el firmare de nuevo.",
  "getDigital": "[ICON] lee pin digital [PORT]",
  "getAnalog": "[ICON] lee pin analógico [PORT]",
  "getPulse": "[ICON] lee pulso de pin [PORT] espera como máximo [TIME]",
  "SETDIGITAL_LEVEL_0": "alto",
  "SETDIGITAL_LEVEL_1": "bajo",
  "setDigital": "[ICON] fija salida del pin digital [PORT] a [LEVEL]",
  "setPwm": "[ICON] fija la salida PWM [PORT] a [POWER]",
  "SETTONE_NOTE_0": "C2",
  "SETTONE_NOTE_1": "D2",
  "SETTONE_NOTE_2": "E2",
  "SETTONE_NOTE_3": "F2",
  "SETTONE_NOTE_4": "G2",
  "SETTONE_NOTE_5": "A2",
  "SETTONE_NOTE_6": "B2",
  "SETTONE_NOTE_7": "C3",
  "SETTONE_NOTE_8": "D3",
  "SETTONE_NOTE_9": "E3",
  "SETTONE_NOTE_10": "F3",
  "SETTONE_NOTE_11": "G3",
  "SETTONE_NOTE_12": "A3",
  "SETTONE_NOTE_13": "B3",
  "SETTONE_NOTE_14": "C4",
  "SETTONE_NOTE_15": "D4",
  "SETTONE_NOTE_16": "E4",
  "SETTONE_NOTE_17": "F4",
  "SETTONE_NOTE_18": "G4",
  "SETTONE_NOTE_19": "A4",
  "SETTONE_NOTE_20": "B4",
  "SETTONE_NOTE_21": "C5",
  "SETTONE_NOTE_22": "D5",
  "SETTONE_NOTE_23": "E5",
  "SETTONE_NOTE_24": "F5",
  "SETTONE_NOTE_25": "G5",
  "SETTONE_NOTE_26": "A5",
  "SETTONE_NOTE_27": "B5",
  "SETTONE_NOTE_28": "C6",
  "SETTONE_NOTE_29": "D6",
  "SETTONE_NOTE_30": "E6",
  "SETTONE_NOTE_31": "F6",
  "SETTONE_NOTE_32": "G6",
  "SETTONE_NOTE_33": "A6",
  "SETTONE_NOTE_34": "B6",
  "SETTONE_NOTE_35": "C7",
  "SETTONE_NOTE_36": "D7",
  "SETTONE_NOTE_37": "E7",
  "SETTONE_NOTE_38": "F7",
  "SETTONE_NOTE_39": "G7",
  "SETTONE_NOTE_40": "A7",
  "SETTONE_NOTE_41": "Si7",
  "SETTONE_NOTE_42": "Do8",
  "setTone": "play pin[PORT] with note [NOTE] for [BEAT] beats",
  "setServo": "set servo pin [PORT] angle as[ANGLE]",
  "SUSPEND_PORT_0": "2",
  "SUSPEND_PORT_1": "3",
  "SUSPEND_MODE_0": "flanco de subida",
  "SUSPEND_MODE_1": "flanco de bajada",
  "SUSPEND_MODE_2": "cambio",
  "SUSPEND_MODE_3": "bajo",
  "suspend": "[ICON] espera hasta que pin [PORT] detecte [MODE]",
  "cancelSuspend": "[ICON] no esperar a pin [PORT]",
  "CATEGORY_PIN": "Pin",
  "serialWrite": "write[TEXT]to serial port",
  "getSerialAvailable": "[ICON] bytes legibles del puerto serie",
  "serialRead": "[ICON] lee un byte del puerto serie",
  "CATEGORY_SERIALPORT": "Puerto serie",
  "mapping": "[ICON] mapear [value] de ([fromLow], [fromHigh]) a ([toLow], [toHigh]）",
  "constraint": "[ICON] restringir [x] entre ([a], [b])",
  "TYPECONVERSION_TYPE_0": "número entero",
  "TYPECONVERSION_TYPE_1": "número con decimales",
  "TYPECONVERSION_TYPE_2": "texto",
  "typeConversion": "[ICON] [NUMBER] convertido a [TYPE]",
  "ASCIICharConversion": "[ICON] código ASCII [NUMBER] convertido a carácter",
  "ASCIINumConversion": "[ICON] [STRING] convertido a código ASCII",
  "cate_ead4430e": "Datos",
  "getUltrasonic": "[ICON] lee sensor de ultrasonidos, pin de activación [PORT1], pin de eco [PORT2]",
  "getTimer": "[ICON] temporizador",
  "resetTimer": "[ICON] reiniciar temporizador",
  "CATEGORY_SENSOR": "Sensor",
  "arduino_when_board_launch": "cuando Arduino se inicia",
  "firmwares_description_0": "ninguna",
  "settings_0": "Actualizar firmware"
}
